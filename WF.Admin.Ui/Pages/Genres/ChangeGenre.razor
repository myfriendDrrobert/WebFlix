@inject IAdminService AdminService

<div class="d-xl-flex justify-content-center">
    <EditForm Model="@Model" OnValidSubmit="@OnFormSubmit" class="mb-5 border border-1 border-secondary p-2 w-25">
        <DataAnnotationsValidator />
        <h4>@Page</h4>
        <div class="mb-3">
            @if (Page.Equals(PageType.Delete))
            {
                    <InputText id="title" class="form-control me-2" @bind-Value="Model.Name" disabled placeholder="Title"></InputText>
            }
            else
            {
                    <InputText id="title" class="form-control me-2" @bind-Value="Model.Name" placeholder="Title"></InputText>
            }
            <ValidationMessage For="@(() => Model.Name)" />
        </div>
        @* @if (!Page.Equals(PageType.Delete))
        {
            <div class="mb-3">
                <InputText id="description" class="form-control me-2" @bind-Value="Model.Name" placeholder="Description"></InputText>
                <ValidationMessage For="@(() => Model.Name)" />
            </div>*@

        @*<InputSelect @bind-Value="Model.GenreId" class="form-control mb-3">
        <option value=0>Genre ...</option>
        @foreach (var genre in Genres)
        {
        <option value="@genre.Id">@genre.Name</option>
        }
        </InputSelect>*@
        @* <InputSelect @bind-Value="Model.DirectorId" class="form-control mb-3">
                <option value=0>Director ...</option>
                @foreach (var director in Directors)
                {
                    <option value="@director.Id">@director.Name</option>
                }
            </InputSelect>*@

        @* <div class="mb-3">
                <label>
                    <InputCheckbox @bind-Value="Model.Free" />
                    Free Course
                </label>
            </div>*@
       @* }*@
        <button type="submit" class="btn btn-@(Page.Equals(PageType.Delete) ? "danger" : "primary") rounded-0">@(Page.Equals(PageType.Edit) ? "Save" : @Page)</button>

    </EditForm>
</div>



@code {
    [Parameter] public GenreDTO Model { get; set; } = new();

    [Parameter] public string Page { get; set; } = string.Empty;

    [Parameter] public EventCallback<string> OnChange { get; set; }

    public List<DirectorDTO> Directors { get; set; } = new();
    public List<GenreEditDTO> Genres { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        //Directors = await AdminService.GetAsync<DirectorDTO>("Director");

        //Genres = await AdminService.GetAsync<GenreEditDTO>("Genres");
    }

    private async Task OnFormSubmit()
    {
        try
        {
            if (Page.Equals(PageType.Create)) await AdminService.CreateAsync<GenreDTO >("Genres", Model);

            if (Page.Equals(PageType.Edit)) await AdminService.EditAsync<GenreDTO>($"Genres/{Model.Id}", Model);

            if (Page.Equals(PageType.Delete)) await AdminService.DeleteAsync<GenreDTO>($"Genres/{Model.Id}");


            await OnChange.InvokeAsync("");

        }
        catch
        {
            await OnChange.InvokeAsync("Couldn't create/edit/delete the film.");
        }
    }
}